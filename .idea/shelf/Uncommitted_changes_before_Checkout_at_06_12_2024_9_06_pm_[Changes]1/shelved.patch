Index: app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/SG_MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/SG_MainActivity.java b/app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/SG_MainActivity.java
new file mode 100644
--- /dev/null	(date 1733483638917)
+++ b/app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/SG_MainActivity.java	(date 1733483638917)
@@ -0,0 +1,164 @@
+package com.zsinnovations.gamebox.ui.snakegame;
+
+import android.annotation.SuppressLint;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.media.MediaPlayer;
+import android.os.Bundle;
+import android.view.View;
+import android.view.animation.Animation;
+import android.view.animation.AnimationUtils;
+import android.widget.Button;
+import android.widget.ImageView;
+
+import androidx.activity.EdgeToEdge;
+import androidx.activity.OnBackPressedCallback;
+import androidx.appcompat.app.AlertDialog;
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.core.graphics.Insets;
+import androidx.core.view.ViewCompat;
+import androidx.core.view.WindowInsetsCompat;
+
+import com.zsinnovations.gamebox.MainActivity;
+import com.zsinnovations.gamebox.R;
+import com.zsinnovations.gamebox.ui.balloonburst.BG_GameActivity;
+import com.zsinnovations.gamebox.ui.balloonburst.BG_MainActivity;
+
+public class SG_MainActivity extends AppCompatActivity {
+
+    private Animation animation;
+    private ImageView sound_max_level,sound_min_level,sound_mute;
+    private Button startButton;
+    private MediaPlayer mediaPlayer;
+    boolean status = false;
+
+    @SuppressLint("MissingInflatedId")
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_sg_main);  // Set the layout for this activity
+
+
+        startButton= findViewById(R.id.startButton);
+        sound_max_level = findViewById(R.id.level_two_sound);  // Add this line
+        sound_min_level = findViewById(R.id.level_one_sound);  // Add this line
+        sound_mute = findViewById(R.id.zero_sound);  // Add this line
+        animation = AnimationUtils.loadAnimation(SG_MainActivity.this, R.anim.scale_animation);
+        startButton.setAnimation(animation);
+        getOnBackPressedDispatcher().addCallback(this, new OnBackPressedCallback(true) {
+            @Override
+            public void handleOnBackPressed() {
+                showExitConfirmationDialog();
+            }
+        });
+    }
+
+
+    private void showExitConfirmationDialog() {
+        AlertDialog.Builder builder = new AlertDialog.Builder(SG_MainActivity.this);
+        builder.setTitle("Snake Game ");
+        builder.setMessage("Are you sure you want to quit the game?");
+        builder.setCancelable(false);
+
+        builder.setNegativeButton("Quit", (dialog, which) -> {
+            mediaPlayer.stop();
+            Intent intent = new Intent(SG_MainActivity.this, MainActivity.class); // Replace with your main activity class
+            startActivity(intent);
+            finish();
+        });
+
+        builder.setPositiveButton("Cancel", (dialog, which) -> dialog.cancel());
+
+        builder.create().show();
+    }
+
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        SharedPreferences preferences = getSharedPreferences("MusicPrefs", MODE_PRIVATE);
+        int savedPosition = preferences.getInt("MusicPosition", 0);
+        boolean isPlaying = preferences.getBoolean("MusicPlaying", true);
+
+        if (mediaPlayer == null) {
+            mediaPlayer = MediaPlayer.create(SG_MainActivity.this, R.raw.fb_audio);
+            mediaPlayer.setLooping(true);
+        }
+
+        mediaPlayer.seekTo(savedPosition);
+
+        if (isPlaying) {
+            mediaPlayer.start();
+        }
+
+        sound_max_level.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (!status) {
+                    mediaPlayer.setVolume(0, 0);
+                    sound_max_level.setVisibility(View.INVISIBLE);
+                    sound_mute.setVisibility(View.VISIBLE);
+                    status = true;
+                } else {
+                    mediaPlayer.setVolume(1, 1);
+                    sound_max_level.setVisibility(View.VISIBLE);
+                    sound_mute.setVisibility(View.INVISIBLE);
+                    status = false;
+                }
+            }
+        });
+
+        sound_mute.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (!status) {
+                    mediaPlayer.setVolume(0, 0);
+                    sound_max_level.setVisibility(View.INVISIBLE);
+                    sound_mute.setVisibility(View.VISIBLE);
+                    status = true;
+                } else {
+                    mediaPlayer.setVolume(1, 1);
+                    sound_max_level.setVisibility(View.VISIBLE);
+                    sound_mute.setVisibility(View.INVISIBLE);
+                    status = false;
+                }
+            }
+        });
+
+        startButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                saveMusicState();
+                Intent intent = new Intent(SG_MainActivity.this, SG_GameActivity.class);
+                startActivity(intent);
+            }
+        });
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+        saveMusicState();
+    }
+
+    private void saveMusicState() {
+        if (mediaPlayer != null) {
+            SharedPreferences preferences = getSharedPreferences("MusicPrefs", MODE_PRIVATE);
+            SharedPreferences.Editor editor = preferences.edit();
+            editor.putInt("MusicPosition", mediaPlayer.getCurrentPosition());
+            editor.putBoolean("MusicPlaying", mediaPlayer.isPlaying());
+            editor.apply();
+            mediaPlayer.pause();
+        }
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        if (mediaPlayer != null) {
+            mediaPlayer.release();
+            mediaPlayer = null;
+        }
+    }
+}
\ No newline at end of file
Index: app/src/main/res/layout/activity_sg_game.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_sg_game.xml b/app/src/main/res/layout/activity_sg_game.xml
new file mode 100644
--- /dev/null	(date 1733300707780)
+++ b/app/src/main/res/layout/activity_sg_game.xml	(date 1733300707780)
@@ -0,0 +1,19 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    tools:context=".ui.snakegame.SG_GameActivity">
+
+    <com.zsinnovations.gamebox.ui.snakegame.GameView
+        android:id="@+id/gameView"
+        android:layout_width="match_parent"
+        android:layout_height="match_parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintEnd_toEndOf="parent" />
+
+</androidx.constraintlayout.widget.ConstraintLayout>
Index: app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/SG_GameActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/SG_GameActivity.java b/app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/SG_GameActivity.java
new file mode 100644
--- /dev/null	(date 1733483348317)
+++ b/app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/SG_GameActivity.java	(date 1733483348317)
@@ -0,0 +1,167 @@
+package com.zsinnovations.gamebox.ui.snakegame;
+
+import android.content.Intent;
+import android.graphics.Point;
+import android.os.Bundle;
+import android.os.Handler;
+import android.os.Looper;
+import android.view.MotionEvent;
+import android.view.View;
+
+import androidx.activity.ComponentActivity;
+import androidx.annotation.Nullable;
+import androidx.lifecycle.ViewModelProvider;
+
+import com.zsinnovations.gamebox.R;
+
+
+public class SG_GameActivity extends ComponentActivity {
+    private SnakeGameViewModel viewModel;
+    private GameView gameView;
+    private Handler gameHandler;
+    private static final int GAME_SPEED = 200; // milliseconds
+
+    @Override
+    protected void onCreate(@Nullable Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_sg_game);
+
+        Point size = new Point();
+        getWindowManager().getDefaultDisplay().getSize(size);
+
+        viewModel = new ViewModelProvider(this).get(SnakeGameViewModel.class);
+        gameView = findViewById(R.id.gameView);
+        gameView.setViewModel(viewModel);
+
+        viewModel.startGame(size.x / 40, (size.y / 40) - 2);
+
+        setupGameLoop();
+        setupControls();
+    }
+
+    private void setupGameLoop() {
+        gameHandler = new Handler(Looper.getMainLooper());
+        gameHandler.postDelayed(new Runnable() {
+            @Override
+            public void run() {
+                if (!viewModel.isGameOver()) {
+                    Point size = new Point();
+                    getWindowManager().getDefaultDisplay().getSize(size);
+                    viewModel.updateGame(size.x / 40, (size.y / 40) - 2);
+                    gameView.invalidate();
+                    gameHandler.postDelayed(this, GAME_SPEED);
+                } else {
+                    // Game Over Logic
+                    viewModel.saveHighestScore(SG_GameActivity.this, viewModel.getScore());
+                    Intent resultIntent = new Intent(SG_GameActivity.this, SG_ResultActivity.class);
+                    resultIntent.putExtra("SCORE", viewModel.getScore());
+                    resultIntent.putExtra("HIGHEST_SCORE", viewModel.getHighestScore(SG_GameActivity.this));
+                    startActivity(resultIntent);
+                    finish();
+                }
+            }
+        }, GAME_SPEED);
+    }
+
+//    private void setupControls() {
+//        gameView.setOnTouchListener(new View.OnTouchListener() {
+//            private float startX, startY;
+//            private static final int MIN_SWIPE_DISTANCE = 100;
+//
+//            @Override
+//            public boolean onTouch(View v, MotionEvent event) {
+//                switch (event.getAction()) {
+//                    case MotionEvent.ACTION_DOWN:
+//                        startX = event.getX();
+//                        startY = event.getY();
+//                        return true;
+//
+//                    case MotionEvent.ACTION_UP:
+//                        float endX = event.getX();
+//                        float endY = event.getY();
+//
+//                        float deltaX = endX - startX;
+//                        float deltaY = endY - startY;
+//
+//                        // Determine swipe direction based on distance and angle
+//                        if (Math.abs(deltaX) > Math.abs(deltaY)) {
+//                            // Horizontal swipe
+//                            if (Math.abs(deltaX) > MIN_SWIPE_DISTANCE) {
+//                                if (deltaX > 0) {
+//                                    // Right swipe
+//                                    viewModel.changeDirection(SnakeGameViewModel.Direction.RIGHT);
+//                                } else {
+//                                    // Left swipe
+//                                    viewModel.changeDirection(SnakeGameViewModel.Direction.LEFT);
+//                                }
+//                            }
+//                        } else {
+//                            // Vertical swipe
+//                            if (Math.abs(deltaY) > MIN_SWIPE_DISTANCE) {
+//                                if (deltaY > 0) {
+//                                    // Down swipe
+//                                    viewModel.changeDirection(SnakeGameViewModel.Direction.DOWN);
+//                                } else {
+//                                    // Up swipe
+//                                    viewModel.changeDirection(SnakeGameViewModel.Direction.UP);
+//                                }
+//                            }
+//                        }
+//                        return true;
+//                }
+//                return false;
+//            }
+//        });
+//    }
+
+    private void setupControls() {
+        gameView.setOnTouchListener(new View.OnTouchListener() {
+            private float startX, startY;
+            private static final int MIN_SWIPE_DISTANCE = 50;  // Reduced for more responsive controls
+            private static final int MAX_SWIPE_TIME = 500;     // Maximum time for a valid swipe
+            private long startTime;
+
+            @Override
+            public boolean onTouch(View v, MotionEvent event) {
+                switch (event.getAction()) {
+                    case MotionEvent.ACTION_DOWN:
+                        startX = event.getX();
+                        startY = event.getY();
+                        startTime = System.currentTimeMillis();
+                        return true;
+
+                    case MotionEvent.ACTION_UP:
+                        float endX = event.getX();
+                        float endY = event.getY();
+                        long endTime = System.currentTimeMillis();
+
+                        float deltaX = endX - startX;
+                        float deltaY = endY - startY;
+
+                        // Check swipe duration to prevent accidental direction changes
+                        if (endTime - startTime > MAX_SWIPE_TIME) {
+                            return false;
+                        }
+
+                        // Use angle-based direction determination for more natural control
+                        double angle = Math.toDegrees(Math.atan2(deltaY, deltaX));
+
+                        // Angle-based direction selection with broader ranges
+                        if (Math.abs(deltaX) > MIN_SWIPE_DISTANCE || Math.abs(deltaY) > MIN_SWIPE_DISTANCE) {
+                            if (angle >= -135 && angle <= -45) {
+                                viewModel.changeDirection(SnakeGameViewModel.Direction.UP);
+                            } else if (angle > -45 && angle < 45) {
+                                viewModel.changeDirection(SnakeGameViewModel.Direction.RIGHT);
+                            } else if (angle >= 45 && angle <= 135) {
+                                viewModel.changeDirection(SnakeGameViewModel.Direction.DOWN);
+                            } else {
+                                viewModel.changeDirection(SnakeGameViewModel.Direction.LEFT);
+                            }
+                        }
+                        return true;
+                }
+                return false;
+            }
+        });
+    }
+}
Index: app/src/main/res/layout/activity_sg_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_sg_main.xml b/app/src/main/res/layout/activity_sg_main.xml
new file mode 100644
--- /dev/null	(date 1733483638907)
+++ b/app/src/main/res/layout/activity_sg_main.xml	(date 1733483638907)
@@ -0,0 +1,74 @@
+<?xml version="1.0" encoding="utf-8"?>
+<androidx.constraintlayout.widget.ConstraintLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:app="http://schemas.android.com/apk/res-auto"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:id="@+id/main"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="@color/material_dynamic_neutral_variant20"
+    tools:context=".ui.snakegame.SG_MainActivity">
+
+    <ImageView
+        android:id="@+id/level_two_sound"
+        android:layout_width="50dp"
+        android:layout_height="50dp"
+        android:layout_marginEnd="16dp"
+
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintVertical_bias="0.714"
+        app:srcCompat="@drawable/level_two_sound" />
+
+    <ImageView
+        android:id="@+id/level_one_sound"
+
+        android:layout_width="50dp"
+        android:layout_height="50dp"
+        android:layout_marginEnd="16dp"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintVertical_bias="0.714"
+        app:srcCompat="@drawable/level_one_sound"
+        android:visibility="invisible"/>
+
+    <ImageView
+        android:id="@+id/zero_sound"
+
+        android:layout_width="50dp"
+        android:layout_height="50dp"
+        android:layout_marginEnd="27dp"
+
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintTop_toTopOf="parent"
+        app:layout_constraintVertical_bias="0.714"
+        app:srcCompat="@drawable/zero_sound"
+        android:visibility="invisible"/>
+
+
+    <TextView
+        android:id="@+id/textView4"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="312dp"
+        android:text="Snake Game"
+        android:textColor="#EDE6E6"
+        android:textSize="48sp"
+        android:textStyle="bold"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintHorizontal_bias="0.495"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toTopOf="parent" />
+
+    <Button
+        android:id="@+id/startButton"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_marginTop="48dp"
+        android:backgroundTint="#902A2A"
+        android:text="Play"
+        android:textColorLink="#D32A2A"
+        app:layout_constraintEnd_toEndOf="parent"
+        app:layout_constraintStart_toStartOf="parent"
+        app:layout_constraintTop_toBottomOf="@+id/textView4" />
+
+</androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
Index: app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/SnakeGameViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/SnakeGameViewModel.java b/app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/SnakeGameViewModel.java
new file mode 100644
--- /dev/null	(date 1733301323394)
+++ b/app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/SnakeGameViewModel.java	(date 1733301323394)
@@ -0,0 +1,161 @@
+package com.zsinnovations.gamebox.ui.snakegame;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+
+import androidx.lifecycle.ViewModel;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+public class SnakeGameViewModel extends ViewModel {
+
+    private static final String PREFS_NAME = "SnakeGamePrefs";
+    private static final String HIGHEST_SCORE_KEY = "HighestScore";
+    public enum Direction {
+        UP, DOWN, LEFT, RIGHT;
+
+        public boolean isOpposite(Direction other) {
+            return (this == UP && other == DOWN) ||
+                    (this == DOWN && other == UP) ||
+                    (this == LEFT && other == RIGHT) ||
+                    (this == RIGHT && other == LEFT);
+        }
+    }
+
+    private static class GameState {
+        List<int[]> snake;
+        int[] apple;
+        int score;
+        boolean isGameOver;
+
+        GameState() {
+            snake = new ArrayList<>();
+            snake.add(new int[]{20, 20});
+            snake.add(new int[]{19, 20});
+            snake.add(new int[]{18, 20});
+            apple = new int[]{10, 10};
+            score = 0;
+            isGameOver = false;
+        }
+    }
+
+    private final GameState gameState = new GameState();
+    private Direction currentDirection = Direction.RIGHT;
+
+    public List<int[]> getSnake() {
+        return gameState.snake;
+    }
+
+    public int[] getApple() {
+        return gameState.apple;
+    }
+
+    public int getScore() {
+        return gameState.score;
+    }
+
+    public boolean isGameOver() {
+        return gameState.isGameOver;
+    }
+
+    public void changeDirection(Direction newDirection) {
+        if (!currentDirection.isOpposite(newDirection)) {
+            currentDirection = newDirection;
+        }
+    }
+
+    public void startGame(int width, int height) {
+        gameState.snake.clear();
+        gameState.snake.add(new int[]{width / 2, height / 2});
+        gameState.snake.add(new int[]{(width / 2) - 1, height / 2});
+        gameState.snake.add(new int[]{(width / 2) - 2, height / 2});
+        spawnApple(width, height);
+    }
+
+    public void updateGame(int width, int height) {
+        if (gameState.isGameOver) return;
+
+        int[] head = gameState.snake.get(0);
+        int[] newHead = new int[]{head[0], head[1]};
+
+        switch (currentDirection) {
+            case UP:
+                newHead[1]--;
+                break;
+            case DOWN:
+                newHead[1]++;
+                break;
+            case LEFT:
+                newHead[0]--;
+                break;
+            case RIGHT:
+                newHead[0]++;
+                break;
+        }
+
+        if (isCollision(newHead, width, height)) {
+            gameState.isGameOver = true;
+            return;
+        }
+
+        gameState.snake.add(0, newHead);
+
+        if (newHead[0] == gameState.apple[0] && newHead[1] == gameState.apple[1]) {
+            gameState.score += 10;
+            spawnApple(width, height);
+        } else {
+            gameState.snake.remove(gameState.snake.size() - 1);
+        }
+    }
+
+    private boolean isCollision(int[] head, int width, int height) {
+        if (head[0] < 0 || head[1] < 0 || head[0] >= width || head[1] >= height) {
+            return true;
+        }
+
+        for (int i = 1; i < gameState.snake.size(); i++) {
+            if (head[0] == gameState.snake.get(i)[0] && head[1] == gameState.snake.get(i)[1]) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    private void spawnApple(int width, int height) {
+        Random random = new Random();
+        boolean validApplePosition;
+        int appleX, appleY;
+        do {
+            appleX = random.nextInt(width);
+            appleY = random.nextInt(height);
+            validApplePosition = true;
+
+            // Check if apple spawns on snake
+            for (int[] snakePart : gameState.snake) {
+                if (snakePart[0] == appleX && snakePart[1] == appleY) {
+                    validApplePosition = false;
+                    break;
+                }
+            }
+        } while (!validApplePosition);
+
+        gameState.apple[0] = appleX;
+        gameState.apple[1] = appleY;
+    }
+
+    public void saveHighestScore(Context context, int score) {
+        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
+        int currentHighestScore = prefs.getInt(HIGHEST_SCORE_KEY, 0);
+
+        if (score > currentHighestScore) {
+            prefs.edit().putInt(HIGHEST_SCORE_KEY, score).apply();
+        }
+    }
+
+    public int getHighestScore(Context context) {
+        SharedPreferences prefs = context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE);
+        return prefs.getInt(HIGHEST_SCORE_KEY, 0);
+    }
+}
Index: app/src/main/res/layout/activity_sg_result.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/activity_sg_result.xml b/app/src/main/res/layout/activity_sg_result.xml
new file mode 100644
--- /dev/null	(date 1733301657241)
+++ b/app/src/main/res/layout/activity_sg_result.xml	(date 1733301657241)
@@ -0,0 +1,46 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout
+    xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:orientation="vertical"
+    android:gravity="center"
+    android:padding="16dp">
+
+    <TextView
+        android:id="@+id/gameOverText"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Game Over"
+        android:textSize="32sp"
+        android:layout_marginBottom="32dp"/>
+
+    <TextView
+        android:id="@+id/currentScoreTextView"
+        android:text=""
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:textSize="24sp"
+        android:layout_marginBottom="16dp"/>
+
+    <TextView
+        android:id="@+id/highestScoreTextView"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text=""
+        android:textSize="24sp"
+        android:layout_marginBottom="32dp"/>
+
+    <Button
+        android:id="@+id/restartButton"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Restart Game"
+        android:layout_marginBottom="16dp"/>
+
+    <Button
+        android:id="@+id/mainMenuButton"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:text="Main Menu"/>
+</LinearLayout>
\ No newline at end of file
Index: app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/GameView.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/GameView.java b/app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/GameView.java
new file mode 100644
--- /dev/null	(date 1733300962697)
+++ b/app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/GameView.java	(date 1733300962697)
@@ -0,0 +1,66 @@
+package com.zsinnovations.gamebox.ui.snakegame;
+
+import android.content.Context;
+import android.graphics.Canvas;
+import android.graphics.Color;
+import android.graphics.Paint;
+import android.util.AttributeSet;
+import android.view.View;
+
+
+
+public class GameView extends View {
+    private final Paint paint = new Paint();
+    private SnakeGameViewModel viewModel;
+
+    public GameView(Context context, AttributeSet attrs) {
+        super(context, attrs);
+    }
+
+    public void setViewModel(SnakeGameViewModel viewModel) {
+        this.viewModel = viewModel;
+    }
+
+    @Override
+    protected void onDraw(Canvas canvas) {
+        super.onDraw(canvas);
+
+        if (viewModel != null) {
+            // Draw background more efficiently
+            canvas.drawColor(Color.BLACK);
+
+            // Separate paints for different elements
+            Paint snakePaint = new Paint();
+            snakePaint.setColor(Color.GREEN);
+            snakePaint.setStyle(Paint.Style.FILL);
+
+            Paint applePaint = new Paint();
+            applePaint.setColor(Color.RED);
+            applePaint.setStyle(Paint.Style.FILL);
+
+            Paint textPaint = new Paint();
+            textPaint.setColor(Color.WHITE);
+            textPaint.setTextSize(50);
+
+            // Draw snake
+            for (int[] part : viewModel.getSnake()) {
+                canvas.drawRect(
+                        part[0] * 40, part[1] * 40,
+                        (part[0] + 1) * 40, (part[1] + 1) * 40,
+                        snakePaint
+                );
+            }
+
+            // Draw apple
+            int[] apple = viewModel.getApple();
+            canvas.drawRect(
+                    apple[0] * 40, apple[1] * 40,
+                    (apple[0] + 1) * 40, (apple[1] + 1) * 40,
+                    applePaint
+            );
+
+            // Draw score
+            canvas.drawText("Score: " + viewModel.getScore(), 20, 50, textPaint);
+        }
+    }
+}
Index: app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/SG_ResultActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/SG_ResultActivity.java b/app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/SG_ResultActivity.java
new file mode 100644
--- /dev/null	(date 1733483348331)
+++ b/app/src/main/java/com/zsinnovations/gamebox/ui/snakegame/SG_ResultActivity.java	(date 1733483348331)
@@ -0,0 +1,49 @@
+package com.zsinnovations.gamebox.ui.snakegame;
+
+import android.content.Intent;
+import android.os.Bundle;
+import android.widget.Button;
+import android.widget.TextView;
+
+import androidx.appcompat.app.AppCompatActivity;
+
+import com.zsinnovations.gamebox.MainActivity;
+import com.zsinnovations.gamebox.R;
+
+public class SG_ResultActivity extends AppCompatActivity {
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_sg_result);
+
+        // Retrieve game results
+        int currentScore = getIntent().getIntExtra("SCORE", 0);
+        int highestScore = getIntent().getIntExtra("HIGHEST_SCORE", 0);
+
+        // Initialize UI components
+        TextView currentScoreTV = findViewById(R.id.currentScoreTextView);
+        TextView highestScoreTV = findViewById(R.id.highestScoreTextView);
+        Button restartButton = findViewById(R.id.restartButton);
+        Button mainMenuButton = findViewById(R.id.mainMenuButton);
+
+        // Set score texts
+        currentScoreTV.setText("Your Score: " + currentScore);
+        highestScoreTV.setText("Highest Score: " + highestScore);
+
+        // Restart game
+        restartButton.setOnClickListener(v -> {
+            Intent intent = new Intent(this, SG_GameActivity.class);
+            startActivity(intent);
+            finish();
+        });
+
+        // Return to main menu
+        mainMenuButton.setOnClickListener(v -> {
+            // Replace with your main menu activity
+            Intent intent = new Intent(this, MainActivity.class);
+            startActivity(intent);
+            finish();
+        });
+    }
+}
\ No newline at end of file
