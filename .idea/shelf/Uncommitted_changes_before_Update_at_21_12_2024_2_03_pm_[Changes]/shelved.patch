Index: app/src/test/java/com/zsinnovations/gamebox/SplashActivityTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/test/java/com/zsinnovations/gamebox/SplashActivityTest.java b/app/src/test/java/com/zsinnovations/gamebox/SplashActivityTest.java
new file mode 100644
--- /dev/null	(date 1734728160547)
+++ b/app/src/test/java/com/zsinnovations/gamebox/SplashActivityTest.java	(date 1734728160547)
@@ -0,0 +1,22 @@
+package com.zsinnovations.gamebox;
+
+import junit.framework.TestCase;
+
+public class SplashActivityTest extends TestCase {
+
+    public void setUp() throws Exception {
+        super.setUp();
+    }
+
+    public void tearDown() throws Exception {
+    }
+
+    public void testOnCreate() {
+    }
+
+    public void testOnPause() {
+    }
+
+    public void testOnResume() {
+    }
+}
\ No newline at end of file
Index: app/src/test/java/com/zsinnovations/gamebox/MainActivityTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/test/java/com/zsinnovations/gamebox/MainActivityTest.java b/app/src/test/java/com/zsinnovations/gamebox/MainActivityTest.java
new file mode 100644
--- /dev/null	(date 1734765075962)
+++ b/app/src/test/java/com/zsinnovations/gamebox/MainActivityTest.java	(date 1734765075962)
@@ -0,0 +1,152 @@
+package com.zsinnovations.gamebox;
+
+import android.app.AlertDialog;
+import android.app.Dialog;
+import android.view.View;
+import android.widget.ImageView;
+
+import androidx.fragment.app.Fragment;
+import androidx.fragment.app.FragmentManager;
+import androidx.fragment.app.FragmentTransaction;
+import junit.framework.TestCase;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.android.controller.ActivityController;
+import org.robolectric.shadows.ShadowAlertDialog;
+import org.robolectric.shadows.ShadowDialog;
+
+import com.zsinnovations.gamebox.ui.mainscreen.GameFragment;
+import com.zsinnovations.gamebox.ui.mainscreen.FavouriteFragment;
+import com.zsinnovations.gamebox.utils.AvatarManager;
+import com.zsinnovations.gamebox.utils.MusicManager;
+import com.zsinnovations.gamebox.utils.SettingsManager;
+
+import static org.mockito.Mockito.*;
+import static org.robolectric.Shadows.shadowOf;
+
+@RunWith(RobolectricTestRunner.class)
+public class MainActivityTest extends TestCase {
+
+    private MainActivity activity;
+    private ActivityController<MainActivity> activityController;
+    private SettingsManager settingsManager;
+
+    @Mock
+    private AvatarManager mockAvatarManager;
+
+    @Mock
+    private ImageView mockImageView;
+
+    @Mock
+    private FragmentManager mockFragmentManager;
+
+    @Mock
+    private FragmentTransaction mockFragmentTransaction;
+
+    @Before
+    public void setUp() throws Exception {
+        super.setUp();
+        MockitoAnnotations.openMocks(this);
+
+        // Initialize activity controller
+        activityController = Robolectric.buildActivity(MainActivity.class);
+        activity = activityController.get();
+
+        // Get the real SettingsManager instance
+        settingsManager = new SettingsManager(activity);
+
+        // Setup fragment manager mocking
+        when(mockFragmentManager.beginTransaction()).thenReturn(mockFragmentTransaction);
+        when(mockFragmentTransaction.setTransition(anyInt())).thenReturn(mockFragmentTransaction);
+        when(mockFragmentTransaction.replace(anyInt(), any(Fragment.class))).thenReturn(mockFragmentTransaction);
+    }
+
+    @Test
+    public void testOnCreate() {
+        // Test initial fragment loading
+        activityController.create();
+
+        // Verify that SettingsManager exists
+        assertNotNull("SettingsManager should exist", settingsManager);
+
+        // Verify music state
+        if (!MusicManager.isPlaying()) {
+            // Use the real settings manager to verify music state
+            assertTrue("Music should be initialized", settingsManager != null);
+        }
+    }
+
+    @Test
+    public void testFooterNavigation() {
+        activityController.create();
+
+        // Get footer navigation buttons
+        ImageView mainButton = activity.findViewById(R.id.imageView2);
+        ImageView mainButtonFilled = activity.findViewById(R.id.imageView4);
+        ImageView favoritesButton = activity.findViewById(R.id.imageView3);
+
+        // Ensure views are not null
+        assertNotNull("Main button should exist", mainButton);
+        assertNotNull("Main button filled should exist", mainButtonFilled);
+        assertNotNull("Favorites button should exist", favoritesButton);
+
+        // Test main button click
+        mainButton.performClick();
+        assertEquals(View.INVISIBLE, mainButton.getVisibility());
+        assertEquals(View.VISIBLE, mainButtonFilled.getVisibility());
+
+        // Test favorites button click
+        favoritesButton.performClick();
+        assertEquals(View.VISIBLE, mainButton.getVisibility());
+    }
+
+    @Test
+    public void testOnPause() {
+        activityController.create().start().resume().pause();
+        // Verify activity state
+        assertFalse("Activity should be paused", activity.isDestroyed());
+    }
+
+    @Test
+    public void testOnResume() {
+        activityController.create().start().resume();
+        // Verify activity state
+        assertTrue("Activity should be resumed", activity.hasWindowFocus());
+    }
+
+    @Test
+    public void testOnDestroy() {
+        activityController.create().destroy();
+        // Verify activity state
+        assertTrue("Activity should be destroyed", activity.isDestroyed());
+    }
+
+    @Test
+    public void testBackPressShowsExitDialog() {
+        activityController.create();
+        activity.onBackPressed();
+
+        // Get the latest dialog using Robolectric's shadow dialog
+        AlertDialog dialog = ShadowAlertDialog.getLatestAlertDialog();
+        assertNotNull("Exit dialog should be shown", dialog);
+        assertTrue("Dialog should be showing", dialog.isShowing());
+
+        // Verify dialog content
+        ShadowAlertDialog shadowDialog = shadowOf(dialog);
+        assertEquals("Gamebox ", shadowDialog.getTitle());
+        assertEquals("Are you sure you want to quit the game?", shadowDialog.getMessage());
+    }
+
+    @Override
+    public void tearDown() throws Exception {
+        if (activityController != null) {
+            activityController.destroy();
+        }
+        super.tearDown();
+    }
+}
\ No newline at end of file
Index: app/build.gradle.kts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n    alias(libs.plugins.android.application)\r\n}\r\n\r\nandroid {\r\n    namespace = \"com.zsinnovations.gamebox\"\r\n    compileSdk = 34\r\n\r\n    defaultConfig {\r\n        applicationId = \"com.zsinnovations.gamebox\"\r\n        minSdk = 24\r\n        targetSdk = 34\r\n        versionCode = 1\r\n        versionName = \"1.0\"\r\n\r\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\r\n    }\r\n\r\n    buildTypes {\r\n        release {\r\n            isMinifyEnabled = false\r\n            proguardFiles(\r\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\r\n                \"proguard-rules.pro\"\r\n            )\r\n        }\r\n    }\r\n    compileOptions {\r\n        sourceCompatibility = JavaVersion.VERSION_11\r\n        targetCompatibility = JavaVersion.VERSION_11\r\n    }\r\n}\r\n\r\ndependencies {\r\n\r\n    implementation(libs.appcompat)\r\n    implementation(libs.material)\r\n    implementation(libs.activity)\r\n    implementation(libs.constraintlayout)\r\n    implementation (\"com.google.code.gson:gson:2.8.9\")\r\n    implementation(\"de.hdodenhof:circleimageview:3.1.0\")\r\n    implementation(libs.firebase.crashlytics.buildtools)\r\n    implementation(libs.navigation.fragment)\r\n    implementation(libs.navigation.ui)\r\n    implementation(libs.gridlayout)\r\n    testImplementation(libs.junit)\r\n    androidTestImplementation(libs.ext.junit)\r\n    androidTestImplementation(libs.espresso.core)\r\n\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/build.gradle.kts b/app/build.gradle.kts
--- a/app/build.gradle.kts	(revision b5f68bf6ea1522a102e318944c682dc401cad260)
+++ b/app/build.gradle.kts	(date 1734766950529)
@@ -25,26 +25,46 @@
             )
         }
     }
-    compileOptions {
-        sourceCompatibility = JavaVersion.VERSION_11
-        targetCompatibility = JavaVersion.VERSION_11
+
+    testOptions {
+        unitTests {
+            isIncludeAndroidResources = true
+        }
+
+    }
+}
+
+tasks.withType<Test> {
+    useJUnitPlatform()
+    testLogging {
+        events("passed", "skipped", "failed")
+        exceptionFormat = org.gradle.api.tasks.testing.logging.TestExceptionFormat.FULL // Use the FULL enum value
+
     }
 }
 
 dependencies {
-
+    // Android dependencies
     implementation(libs.appcompat)
     implementation(libs.material)
     implementation(libs.activity)
     implementation(libs.constraintlayout)
-    implementation ("com.google.code.gson:gson:2.8.9")
+    implementation("com.google.code.gson:gson:2.8.9")
     implementation("de.hdodenhof:circleimageview:3.1.0")
     implementation(libs.firebase.crashlytics.buildtools)
     implementation(libs.navigation.fragment)
     implementation(libs.navigation.ui)
     implementation(libs.gridlayout)
-    testImplementation(libs.junit)
+
+    // Testing dependencies
+    testImplementation("org.junit.jupiter:junit-jupiter:5.10.0")
+    testImplementation("org.junit.vintage:junit-vintage-engine:5.10.0") // For JUnit 4 compatibility
+    testRuntimeOnly("org.junit.platform:junit-platform-launcher:1.10.0")
+    testImplementation("org.robolectric:robolectric:4.10")
+    testImplementation("org.mockito:mockito-core:4.0.0")
+    testImplementation("androidx.test:core:1.5.0")
+    androidTestImplementation("androidx.test:runner:1.5.0")
+    androidTestImplementation("androidx.test:rules:1.5.0")
     androidTestImplementation(libs.ext.junit)
     androidTestImplementation(libs.espresso.core)
-
-}
\ No newline at end of file
+}
