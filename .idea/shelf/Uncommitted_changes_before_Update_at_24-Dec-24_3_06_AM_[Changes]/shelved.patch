Index: app/src/main/res/layout/tzfe_activity_game.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/tzfe_activity_game.xml b/app/src/main/res/layout/tzfe_activity_game.xml
new file mode 100644
--- /dev/null	(date 1734991045122)
+++ b/app/src/main/res/layout/tzfe_activity_game.xml	(date 1734991045122)
@@ -0,0 +1,323 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    xmlns:tools="http://schemas.android.com/tools"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:background="#290668">
+
+
+    <TextView
+        android:id="@+id/gameName"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignParentTop="true"
+        android:layout_alignStart="@id/gameLayout"
+        android:layout_marginTop="44dp"
+        android:text="2048"
+        android:textSize="40sp"
+        android:textColor="#D7DAF0"/>
+
+    <LinearLayout
+        android:id="@+id/scoreLayout"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignTop="@+id/gameName"
+        android:layout_marginEnd="20dp"
+        android:layout_toStartOf="@id/highScoreLayout"
+        android:orientation="vertical">
+
+        <TextView
+            android:id="@+id/scoreNameTextView"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="SCORE"
+            android:textSize="16dp"
+            android:textColor="#D7DAF0"/>
+
+        <TextView
+            android:id="@+id/scoreTextView"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:gravity="center"
+            android:textSize="16dp"
+            android:textColor="#D7DAF0"/>
+    </LinearLayout>
+
+    <LinearLayout
+        android:id="@+id/highScoreLayout"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_alignEnd="@id/gameLayout"
+        android:layout_alignTop="@+id/gameName"
+        android:orientation="vertical">
+
+        <TextView
+            android:id="@+id/highScoreNameTextView"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:text="HIGH SCORE"
+            android:textSize="16dp"
+            android:textColor="#D7DAF0"/>
+
+        <TextView
+            android:id="@+id/highScoreTextView"
+            android:layout_width="match_parent"
+            android:layout_height="wrap_content"
+            android:gravity="center"
+            android:textColor="#D7DAF0"/>
+    </LinearLayout>
+
+    <GridLayout
+        android:id="@+id/gameLayout"
+        android:layout_width="325dp"
+        android:layout_height="325dp"
+        android:layout_below="@+id/gameName"
+        android:background="#030937"
+        android:columnCount="4"
+        android:gravity="center"
+        android:rowCount="4"
+        android:layout_centerInParent="true"
+        android:layout_marginTop="80dp"
+        >
+
+        <TextView
+            android:id="@+id/cell1"
+            android:layout_width="75dp"
+            android:layout_height="75dp"
+            android:layout_column="0"
+            android:layout_columnWeight="1"
+            android:layout_gravity="center|fill"
+            android:layout_marginLeft="5dp"
+            android:layout_marginTop="5dp"
+            android:layout_row="0"
+            android:layout_rowWeight="1"
+            android:gravity="center"
+            android:textSize="20dp" />
+
+        <TextView
+            android:id="@+id/cell2"
+            android:layout_width="75dp"
+            android:layout_height="75dp"
+            android:layout_column="1"
+            android:layout_columnWeight="1"
+            android:layout_gravity="center|fill"
+            android:layout_marginLeft="5dp"
+            android:layout_marginTop="5dp"
+            android:layout_row="0"
+            android:layout_rowWeight="1"
+            android:gravity="center"
+            android:textSize="20dp" />
+
+        <TextView
+            android:id="@+id/cell3"
+            android:layout_width="75dp"
+            android:layout_height="75dp"
+            android:layout_column="2"
+            android:layout_columnWeight="1"
+            android:layout_gravity="center|fill"
+            android:layout_marginLeft="5dp"
+            android:layout_marginTop="5dp"
+            android:layout_row="0"
+            android:layout_rowWeight="1"
+            android:gravity="center"
+            android:textSize="20dp" />
+
+        <TextView
+            android:id="@+id/cell4"
+            android:layout_width="75dp"
+            android:layout_height="75dp"
+            android:layout_column="3"
+            android:layout_columnWeight="1"
+            android:layout_gravity="center|fill"
+            android:layout_marginLeft="5dp"
+            android:layout_marginRight="5dp"
+            android:layout_marginTop="5dp"
+            android:layout_row="0"
+            android:layout_rowWeight="1"
+            android:gravity="center"
+            android:textSize="20dp" />
+
+        <TextView
+            android:id="@+id/cell5"
+            android:layout_width="75dp"
+            android:layout_height="75dp"
+            android:layout_column="0"
+            android:layout_columnWeight="1"
+            android:layout_gravity="center|fill"
+            android:layout_marginLeft="5dp"
+            android:layout_marginTop="5dp"
+            android:layout_row="1"
+            android:layout_rowWeight="1"
+            android:gravity="center"
+            android:textSize="20dp" />
+
+        <TextView
+            android:id="@+id/cell6"
+            android:layout_width="75dp"
+            android:layout_height="75dp"
+            android:layout_column="1"
+            android:layout_columnWeight="1"
+            android:layout_gravity="center|fill"
+            android:layout_marginLeft="5dp"
+            android:layout_marginTop="5dp"
+            android:layout_row="1"
+            android:layout_rowWeight="1"
+            android:gravity="center"
+            android:textSize="20dp" />
+
+        <TextView
+            android:id="@+id/cell7"
+            android:layout_width="75dp"
+            android:layout_height="75dp"
+            android:layout_column="2"
+            android:layout_columnWeight="1"
+            android:layout_gravity="center|fill"
+            android:layout_marginLeft="5dp"
+            android:layout_marginTop="5dp"
+            android:layout_row="1"
+            android:gravity="center"
+            android:textSize="20dp" />
+
+        <TextView
+            android:id="@+id/cell8"
+            android:layout_width="75dp"
+            android:layout_height="75dp"
+            android:layout_column="3"
+            android:layout_columnWeight="1"
+            android:layout_gravity="center|fill"
+            android:layout_marginLeft="5dp"
+            android:layout_marginRight="5dp"
+            android:layout_marginTop="5dp"
+            android:layout_row="1"
+            android:layout_rowWeight="1"
+            android:gravity="center"
+            android:textSize="20dp" />
+
+        <TextView
+            android:id="@+id/cell9"
+            android:layout_width="75dp"
+            android:layout_height="75dp"
+            android:layout_column="0"
+            android:layout_columnWeight="1"
+            android:layout_gravity="center|fill"
+            android:layout_marginLeft="5dp"
+            android:layout_marginTop="5dp"
+            android:layout_row="2"
+            android:layout_rowWeight="1"
+            android:gravity="center"
+            android:textSize="20dp" />
+
+        <TextView
+            android:id="@+id/cell10"
+            android:layout_width="75dp"
+            android:layout_height="75dp"
+            android:layout_column="1"
+            android:layout_columnWeight="1"
+            android:layout_gravity="center|fill"
+            android:layout_marginLeft="5dp"
+            android:layout_marginTop="5dp"
+            android:layout_row="2"
+            android:layout_rowWeight="1"
+            android:gravity="center"
+            android:textSize="20dp" />
+
+        <TextView
+            android:id="@+id/cell11"
+            android:layout_width="75dp"
+            android:layout_height="75dp"
+            android:layout_column="2"
+            android:layout_columnWeight="1"
+            android:layout_gravity="center|fill"
+            android:layout_marginLeft="5dp"
+            android:layout_marginTop="5dp"
+            android:layout_row="2"
+            android:layout_rowWeight="1"
+            android:gravity="center"
+            android:textSize="20dp" />
+
+        <TextView
+            android:id="@+id/cell12"
+            android:layout_width="75dp"
+            android:layout_height="75dp"
+            android:layout_column="3"
+            android:layout_columnWeight="1"
+            android:layout_gravity="center|fill"
+            android:layout_marginLeft="5dp"
+            android:layout_marginRight="5dp"
+            android:layout_marginTop="5dp"
+            android:layout_row="2"
+            android:layout_rowWeight="1"
+            android:gravity="center"
+            android:textSize="20dp" />
+
+        <TextView
+            android:id="@+id/cell13"
+            android:layout_width="75dp"
+            android:layout_height="75dp"
+            android:layout_column="0"
+            android:layout_columnWeight="1"
+            android:layout_gravity="center|fill"
+            android:layout_marginBottom="5dp"
+            android:layout_marginLeft="5dp"
+            android:layout_marginTop="5dp"
+            android:layout_row="3"
+            android:layout_rowWeight="1"
+            android:gravity="center"
+            android:textSize="20dp" />
+
+        <TextView
+            android:id="@+id/cell14"
+            android:layout_width="75dp"
+            android:layout_height="75dp"
+            android:layout_column="1"
+            android:layout_columnWeight="1"
+            android:layout_gravity="center|fill"
+            android:layout_marginBottom="5dp"
+            android:layout_marginLeft="5dp"
+            android:layout_marginTop="5dp"
+            android:layout_row="3"
+            android:layout_rowWeight="1"
+            android:gravity="center"
+            android:textSize="20dp" />
+
+        <TextView
+            android:id="@+id/cell15"
+            android:layout_width="75dp"
+            android:layout_height="75dp"
+            android:layout_column="2"
+            android:layout_columnWeight="1"
+            android:layout_gravity="center|fill"
+            android:layout_marginBottom="5dp"
+            android:layout_marginLeft="5dp"
+            android:layout_marginTop="5dp"
+            android:layout_row="3"
+            android:layout_rowWeight="1"
+            android:gravity="center"
+            android:textSize="20dp" />
+
+        <TextView
+            android:id="@+id/cell16"
+            android:layout_width="75dp"
+            android:layout_height="75dp"
+            android:layout_column="3"
+            android:layout_columnWeight="1"
+            android:layout_gravity="center|fill"
+            android:layout_marginBottom="5dp"
+            android:layout_marginLeft="5dp"
+            android:layout_marginRight="5dp"
+            android:layout_marginTop="5dp"
+            android:layout_row="3"
+            android:layout_rowWeight="1"
+            android:gravity="center"
+            android:textSize="20dp" />
+    </GridLayout>
+
+    <Button
+        android:id="@+id/playAgainButton"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_below="@+id/gameName"
+        android:layout_centerHorizontal="true"
+        android:layout_marginTop="13dp"
+        android:onClick="reset"
+        android:text="Play Again" />
+</RelativeLayout>
Index: app/src/main/res/layout/tzfe_activity_main.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/tzfe_activity_main.xml b/app/src/main/res/layout/tzfe_activity_main.xml
new file mode 100644
--- /dev/null	(date 1734990744640)
+++ b/app/src/main/res/layout/tzfe_activity_main.xml	(date 1734990744640)
@@ -0,0 +1,41 @@
+<RelativeLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:padding="16dp"
+    android:background="@drawable/background_image">
+
+    <TextView
+        android:id="@+id/titleText"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_centerHorizontal="true"
+        android:layout_marginTop="74dp"
+        android:text="2048"
+        android:textColor="#DACBFF"
+        android:textSize="48sp"
+        android:textStyle="bold" />
+
+    <Button
+        android:id="@+id/playButton"
+        android:layout_width="wrap_content"
+        android:layout_height="wrap_content"
+        android:layout_centerInParent="true"
+        android:backgroundTint="#C7BCDE"
+        android:padding="16dp"
+        android:text="PLAY GAME"
+        android:textSize="24sp"
+        android:textColor="#3B0E8E"
+        android:textStyle="bold" />
+
+    <ImageButton
+        android:id="@+id/volumeButton"
+        android:layout_width="48dp"
+        android:layout_height="48dp"
+        android:layout_alignParentTop="true"
+        android:layout_alignParentEnd="true"
+        android:layout_margin="8dp"
+        android:background="?attr/selectableItemBackgroundBorderless"
+        android:src="@drawable/volume_icon"
+        android:importantForAccessibility="no" />
+
+</RelativeLayout>
Index: app/src/main/java/com/zsinnovations/gamebox/ui/TZFE/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/zsinnovations/gamebox/ui/TZFE/MainActivity.java b/app/src/main/java/com/zsinnovations/gamebox/ui/TZFE/MainActivity.java
new file mode 100644
--- /dev/null	(date 1734991589732)
+++ b/app/src/main/java/com/zsinnovations/gamebox/ui/TZFE/MainActivity.java	(date 1734991589732)
@@ -0,0 +1,76 @@
+package com.zsinnovations.gamebox.ui.TZFE;
+
+import android.content.Intent;
+import android.media.MediaPlayer;
+import android.os.Bundle;
+import android.view.View;
+import android.widget.ImageButton;
+import android.widget.Button;
+import androidx.appcompat.app.AppCompatActivity;
+
+public class MainActivity extends AppCompatActivity {
+    private MediaPlayer backgroundMusic;
+    private boolean isMusicPlaying = true;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_main);
+
+        // Initialize background music
+        backgroundMusic = MediaPlayer.create(this, R.raw.twozerofoureight_music);
+        backgroundMusic.setLooping(true);
+        backgroundMusic.start();
+
+        // Play button
+        Button playButton = findViewById(R.id.playButton);
+        playButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Intent gameIntent = new Intent(MainActivity.this, GameActivity.class);
+                startActivity(gameIntent);
+            }
+        });
+
+        // Volume button
+        ImageButton volumeButton = findViewById(R.id.volumeButton);
+        volumeButton.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                if (isMusicPlaying) {
+                    backgroundMusic.pause();
+                    volumeButton.setImageResource(R.drawable.volume_down);
+                } else {
+                    backgroundMusic.start();
+                    volumeButton.setImageResource(R.drawable.volume_icon);
+                }
+                isMusicPlaying = !isMusicPlaying;
+            }
+        });
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+        if (isMusicPlaying && backgroundMusic != null) {
+            backgroundMusic.start();
+        }
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+        if (backgroundMusic != null && backgroundMusic.isPlaying()) {
+            backgroundMusic.pause();
+        }
+    }
+
+    @Override
+    protected void onDestroy() {
+        super.onDestroy();
+        if (backgroundMusic != null) {
+            backgroundMusic.release();
+            backgroundMusic = null;
+        }
+    }
+}
Index: app/src/main/java/com/zsinnovations/gamebox/ui/TZFE/GameActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/zsinnovations/gamebox/ui/TZFE/GameActivity.java b/app/src/main/java/com/zsinnovations/gamebox/ui/TZFE/GameActivity.java
new file mode 100644
--- /dev/null	(date 1734991589728)
+++ b/app/src/main/java/com/zsinnovations/gamebox/ui/TZFE/GameActivity.java	(date 1734991589728)
@@ -0,0 +1,418 @@
+package com.zsinnovations.gamebox.ui.TZFE;
+
+import android.content.SharedPreferences;
+import android.graphics.Color;
+import android.os.Bundle;
+import android.util.Pair;
+import android.view.GestureDetector;
+import android.view.MotionEvent;
+import android.view.View;
+import android.view.Window;
+import android.widget.Button;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.core.view.GestureDetectorCompat;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Random;
+
+public class GameActivity extends AppCompatActivity implements GestureDetector.OnGestureListener {
+    private LinearLayout scoreLayout;
+    private LinearLayout highScoreLayout;
+    private TextView scoreTextView;
+    private TextView highScoreTextView;
+    private long score;
+    private long highScore;
+    private final int UP = 0;
+    private final int DOWN = 1;
+    private final int LEFT = 2;
+    private final int RIGHT = 3;
+    private GestureDetectorCompat gestureDetectorCompat;
+    private TextView[][] cellTextViewMatrix;
+    private int[][] cellValueMatrix;
+    ArrayList<Pair<Integer, Integer>> blankPairs;
+    HashMap<Integer, Integer> correspondingColor;
+    Button playAgainButton;
+    boolean isGame;
+    SharedPreferences sharedPreferences;
+
+    public void reset(View v) {
+        for (int i = 0; i < 4; i++) {
+            for (int j = 0; j < 4; j++) {
+                cellValueMatrix[i][j] = 0;
+                fillCellTextView(cellTextViewMatrix[i][j], cellValueMatrix[i][j]);
+                blankPairs.add(new Pair<>(i, j));
+            }
+        }
+        isGame = true;
+        score = 0;
+        scoreTextView.setText("" + score);
+        highScore = sharedPreferences.getLong("highScore", 0);
+        highScoreTextView.setText("" + highScore);
+        fillRandomNo();
+        fillRandomNo();
+    }
+
+    boolean isGameOver() {
+        if (cellValueMatrix[0][0] == 0)
+            return false;
+        for (int i = 0; i < 4; i++) {
+            for (int j = 1; j < 4; j++) {
+                if (cellValueMatrix[i][j] == 0 || cellValueMatrix[i][j] == cellValueMatrix[i][j - 1])
+                    return false;
+            }
+        }
+        for (int j = 0; j < 4; j++) {
+            for (int i = 1; i < 4; i++) {
+                if (cellValueMatrix[i][j] == 0 || cellValueMatrix[i][j] == cellValueMatrix[i - 1][j])
+                    return false;
+            }
+        }
+        return true;
+    }
+
+    void fillRandomNo() {
+        if (blankPairs.isEmpty())
+            return;
+        Random random = new Random();
+        int randomIndex = random.nextInt(blankPairs.size());
+        Pair<Integer, Integer> randomBlankCell = blankPairs.get(randomIndex);
+        int x = randomBlankCell.first;
+        int y = randomBlankCell.second;
+        blankPairs.remove(randomIndex);
+        int fillValue = random.nextInt(2);
+        if (fillValue == 0)
+            cellValueMatrix[x][y] = 2;
+        else
+            cellValueMatrix[x][y] = 4;
+        fillCellTextView(cellTextViewMatrix[x][y], cellValueMatrix[x][y]);
+    }
+
+    void fillCellTextView(TextView textView, int num) {
+        if (num == 0)
+            textView.setText(" ");
+        else
+            textView.setText("" + num);
+        switch (num) {
+            case 0:
+                textView.setBackgroundColor(Color.LTGRAY);
+                textView.setTextColor(Color.BLACK);
+                break;
+            case 2:
+                textView.setBackgroundColor(Color.rgb(240, 240, 240));
+                textView.setTextColor(Color.BLACK);
+                break;
+            case 4:
+                textView.setBackgroundColor(Color.rgb(255, 255, 224));
+                textView.setTextColor(Color.BLACK);
+                break;
+            case 8:
+                textView.setBackgroundColor(Color.rgb(255, 200, 100));
+                textView.setTextColor(Color.WHITE);
+                break;
+            case 16:
+                textView.setBackgroundColor(Color.rgb(255, 140, 30));
+                textView.setTextColor(Color.WHITE);
+                break;
+            case 32:
+                textView.setBackgroundColor(Color.rgb(255, 100, 65));
+                textView.setTextColor(Color.WHITE);
+                break;
+            case 64:
+                textView.setBackgroundColor(Color.rgb(250, 80, 100));
+                textView.setTextColor(Color.WHITE);
+                break;
+            case 128:
+                textView.setBackgroundColor(Color.rgb(255, 220, 0));
+                textView.setTextColor(Color.WHITE);
+                break;
+            case 256:
+                textView.setBackgroundColor(Color.rgb(240, 240, 0));
+                textView.setTextColor(Color.BLACK);
+                break;
+            case 512:
+                textView.setBackgroundColor(Color.rgb(245, 245, 0));
+                textView.setTextColor(Color.BLACK);
+                break;
+            case 1024:
+                textView.setBackgroundColor(Color.rgb(250, 250, 0));
+                textView.setTextColor(Color.BLACK);
+                break;
+            case 2048:
+                textView.setBackgroundColor(Color.rgb(255, 255, 0));
+                textView.setTextColor(Color.BLACK);
+                break;
+            default:
+                textView.setBackgroundColor(Color.rgb(255, 255, 0));
+                textView.setTextColor(Color.BLACK);
+        }
+    }
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        this.requestWindowFeature(Window.FEATURE_NO_TITLE);
+        setContentView(R.layout.activity_game);
+        scoreLayout = findViewById(R.id.scoreLayout);
+        highScoreLayout = findViewById(R.id.highScoreLayout);
+        scoreTextView = scoreLayout.findViewById(R.id.scoreTextView);
+        highScoreTextView = highScoreLayout.findViewById(R.id.highScoreTextView);
+        gestureDetectorCompat = new GestureDetectorCompat(this, this);
+        score = 0;
+        scoreTextView.setText("" + score);
+        cellTextViewMatrix = new TextView[][]{
+                {findViewById(R.id.cell1), findViewById(R.id.cell2), findViewById(R.id.cell3), findViewById(R.id.cell4)},
+                {findViewById(R.id.cell5), findViewById(R.id.cell6), findViewById(R.id.cell7), findViewById(R.id.cell8)},
+                {findViewById(R.id.cell9), findViewById(R.id.cell10), findViewById(R.id.cell11), findViewById(R.id.cell12)},
+                {findViewById(R.id.cell13), findViewById(R.id.cell14), findViewById(R.id.cell15), findViewById(R.id.cell16)}
+        };
+        cellValueMatrix = new int[][]{{0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}, {0, 0, 0, 0}};
+        blankPairs = new ArrayList<>();
+        for (int i = 0; i < 4; i++) {
+            for (int j = 0; j < 4; j++)
+                blankPairs.add(new Pair<>(i, j));
+        }
+        for (int i = 0; i < 4; i++) {
+            for (int j = 0; j < 4; j++)
+                fillCellTextView(cellTextViewMatrix[i][j], cellValueMatrix[i][j]);
+        }
+        fillRandomNo();
+        fillRandomNo();
+        playAgainButton = findViewById(R.id.playAgainButton);
+        isGame = true;
+        sharedPreferences = this.getSharedPreferences("com.example.android.a2048", MODE_PRIVATE);
+        highScore = sharedPreferences.getLong("highScore", 0);
+        highScoreTextView.setText("" + highScore);
+        correspondingColor = new HashMap<>();
+        correspondingColor.put(0, Color.argb(1, 220, 0, 0));
+    }
+
+    @Override
+    public boolean onTouchEvent(MotionEvent event) {
+        gestureDetectorCompat.onTouchEvent(event);
+        return super.onTouchEvent(event);
+    }
+
+    private void onSwipeUp() {
+        if (!isGame)
+            return;
+        boolean onSwipeUpChange = false;
+        for (int j = 0; j < 4; j++) {
+            for (int i = 1; i < 4; i++) {
+                if (cellValueMatrix[i][j] == 0)
+                    continue;
+                int k = i - 1;
+                while (k >= 0 && cellValueMatrix[k][j] == 0)
+                    k--;
+                if (k == -1 || (cellValueMatrix[k][j] != cellValueMatrix[i][j] && (k + 1) != i)) {
+                    cellValueMatrix[k + 1][j] = cellValueMatrix[i][j];
+                    onSwipeUpChange = true;
+                    blankPairs.remove(new Pair<>(k + 1, j));
+                    cellValueMatrix[i][j] = 0;
+                } else if (cellValueMatrix[k][j] == cellValueMatrix[i][j]) {
+                    cellValueMatrix[k][j] += cellValueMatrix[i][j];
+                    onSwipeUpChange = true;
+                    score += 2 * cellValueMatrix[i][j];
+                    scoreTextView.setText("" + score);
+                    cellValueMatrix[i][j] = 0;
+                }
+            }
+            for (int i = 0; i < 4; i++) {
+                fillCellTextView(cellTextViewMatrix[i][j], cellValueMatrix[i][j]);
+                if (cellValueMatrix[i][j] == 0 && !blankPairs.contains(new Pair<>(i, j)))
+                    blankPairs.add(new Pair<>(i, j));
+            }
+        }
+        if (onSwipeUpChange)
+            fillRandomNo();
+        if (isGameOver()) {
+            highScore = sharedPreferences.getLong("highScore", 0);
+            if (score > highScore)
+                sharedPreferences.edit().putLong("highScore", score).apply();
+            Toast.makeText(getApplicationContext(), "Game Over", Toast.LENGTH_SHORT).show();
+            isGame = false;
+            playAgainButton.setVisibility(View.VISIBLE);
+        }
+    }
+
+    private void onSwipeDown() {
+        if (!isGame)
+            return;
+        boolean onSwipeDownChange = false;
+        for (int j = 0; j < 4; j++) {
+            for (int i = 2; i >= 0; i--) {
+                if (cellValueMatrix[i][j] == 0)
+                    continue;
+                int k = i + 1;
+                while (k <= 3 && cellValueMatrix[k][j] == 0)
+                    k++;
+                if (k == 4 || (cellValueMatrix[k][j] != cellValueMatrix[i][j] && (k - 1) != i)) {
+                    onSwipeDownChange = true;
+                    cellValueMatrix[k - 1][j] = cellValueMatrix[i][j];
+                    blankPairs.remove(new Pair<>(k - 1, j));
+                    cellValueMatrix[i][j] = 0;
+                } else if (cellValueMatrix[k][j] == cellValueMatrix[i][j]) {
+                    onSwipeDownChange = true;
+                    cellValueMatrix[k][j] += cellValueMatrix[i][j];
+                    score += 2 * cellValueMatrix[i][j];
+                    scoreTextView.setText("" + score);
+                    cellValueMatrix[i][j] = 0;
+                }
+            }
+            for (int i = 0; i < 4; i++) {
+                fillCellTextView(cellTextViewMatrix[i][j], cellValueMatrix[i][j]);
+                if (cellValueMatrix[i][j] == 0 && !blankPairs.contains(new Pair<>(i, j)))
+                    blankPairs.add(new Pair<>(i, j));
+            }
+        }
+        if (onSwipeDownChange)
+            fillRandomNo();
+        if (isGameOver()) {
+            highScore = sharedPreferences.getLong("highScore", 0);
+            if (score > highScore)
+                sharedPreferences.edit().putLong("highScore", score).apply();
+            Toast.makeText(getApplicationContext(), "Game Over", Toast.LENGTH_SHORT).show();
+            isGame = false;
+            playAgainButton.setVisibility(View.VISIBLE);
+        }
+    }
+
+    private void onSwipeLeft() {
+        if (!isGame)
+            return;
+        boolean onSwipeLeftChange = false;
+        for (int i = 0; i < 4; i++) {
+            for (int j = 1; j < 4; j++) {
+                if (cellValueMatrix[i][j] == 0)
+                    continue;
+                int k = j - 1;
+                while (k >= 0 && cellValueMatrix[i][k] == 0)
+                    k--;
+                if (k == -1 || (cellValueMatrix[i][k] != cellValueMatrix[i][j] && (k + 1) != j)) {
+                    onSwipeLeftChange = true;
+                    cellValueMatrix[i][k + 1] = cellValueMatrix[i][j];
+                    blankPairs.remove(new Pair<>(i, k + 1));
+                    cellValueMatrix[i][j] = 0;
+                } else if (cellValueMatrix[i][k] == cellValueMatrix[i][j]) {
+                    onSwipeLeftChange = true;
+                    cellValueMatrix[i][k] += cellValueMatrix[i][j];
+                    score += 2 * cellValueMatrix[i][j];
+                    scoreTextView.setText("" + score);
+                    cellValueMatrix[i][j] = 0;
+                }
+            }
+            for (int j = 0; j < 4; j++) {
+                fillCellTextView(cellTextViewMatrix[i][j], cellValueMatrix[i][j]);
+                if (cellValueMatrix[i][j] == 0 && !blankPairs.contains(new Pair<>(i, j)))
+                    blankPairs.add(new Pair<>(i, j));
+            }
+        }
+        if (onSwipeLeftChange)
+            fillRandomNo();
+        if (isGameOver()) {
+            highScore = sharedPreferences.getLong("highScore", 0);
+            if (score > highScore)
+                sharedPreferences.edit().putLong("highScore", score).apply();
+            Toast.makeText(getApplicationContext(), "Game Over", Toast.LENGTH_SHORT).show();
+            isGame = false;
+            playAgainButton.setVisibility(View.VISIBLE);
+        }
+    }
+
+    private void onSwipeRight() {
+        if (!isGame)
+            return;
+        boolean onSwipeRightChange = false;
+        for (int i = 0; i < 4; i++) {
+            for (int j = 2; j >= 0; j--) {
+                if (cellValueMatrix[i][j] == 0)
+                    continue;
+                int k = j + 1;
+                while (k <= 3 && cellValueMatrix[i][k] == 0)
+                    k++;
+                if (k == 4 || (cellValueMatrix[i][k] != cellValueMatrix[i][j] && (k - 1) != j)) {
+                    onSwipeRightChange = true;
+                    cellValueMatrix[i][k - 1] = cellValueMatrix[i][j];
+                    blankPairs.remove(new Pair<>(i, k - 1));
+                    cellValueMatrix[i][j] = 0;
+                } else if (cellValueMatrix[i][k] == cellValueMatrix[i][j]) {
+                    onSwipeRightChange = true;
+                    cellValueMatrix[i][k] += cellValueMatrix[i][j];
+                    score += 2 * cellValueMatrix[i][j];
+                    scoreTextView.setText("" + score);
+                    cellValueMatrix[i][j] = 0;
+                }
+            }
+            for (int j = 0; j < 4; j++) {
+                fillCellTextView(cellTextViewMatrix[i][j], cellValueMatrix[i][j]);
+                if (cellValueMatrix[i][j] == 0 && !blankPairs.contains(new Pair<>(i, j)))
+                    blankPairs.add(new Pair<>(i, j));
+            }
+        }
+        if (onSwipeRightChange)
+            fillRandomNo();
+        if (isGameOver()) {
+            highScore = sharedPreferences.getLong("highScore", 0);
+            if (score > highScore)
+                sharedPreferences.edit().putLong("highScore", score).apply();
+            Toast.makeText(getApplicationContext(), "Game Over", Toast.LENGTH_SHORT).show();
+            isGame = false;
+            playAgainButton.setVisibility(View.VISIBLE);
+        }
+    }
+
+    int getDirection(double x1, double y1, double x2, double y2) {
+        if (Math.abs(y2 - y1) > Math.abs(x2 - x1)) {
+            if (y2 > y1)
+                return DOWN;
+            else
+                return UP;
+        } else {
+            if (x2 > x1)
+                return RIGHT;
+            else
+                return LEFT;
+        }
+    }
+
+    @Override
+    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) {
+        int dir = getDirection(e1.getX(), e1.getY(), e2.getX(), e2.getY());
+        if (dir == UP)
+            onSwipeUp();
+        else if (dir == DOWN)
+            onSwipeDown();
+        else if (dir == LEFT)
+            onSwipeLeft();
+        else
+            onSwipeRight();
+        return true;
+    }
+
+    @Override
+    public boolean onDown(MotionEvent e) {
+        return false;
+    }
+
+    @Override
+    public void onShowPress(MotionEvent e) {
+    }
+
+    @Override
+    public boolean onSingleTapUp(MotionEvent e) {
+        return false;
+    }
+
+    @Override
+    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
+        return false;
+    }
+
+    @Override
+    public void onLongPress(MotionEvent e) {
+    }
+}
\ No newline at end of file
